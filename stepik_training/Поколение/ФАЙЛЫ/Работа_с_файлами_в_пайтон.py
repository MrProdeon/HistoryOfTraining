# open() для открытия файлов
# функция создает файловый объект и связывает его с файлом на диске
#
# файловая_переменная = open(имя_файла, режим_доступа)
#
# Файловая переменная - имя переменной, которая ссылается на файловый объект
# Имя файла - строковый литерал, задающий имя файла
# Режим доступа - строковый литерал, задающий режим доступа
#
# Режимы доступа :
# 'r' - Открыть файл только для чтения без изменения
# 'w' - Открыть файл для записи. Если файл уже существует - стереть его содержимое. Если файла нет - он будет создан
# 'a' - Открыть файл для записи. Данные будут добавлены в конец файла. Если файла нет - он будет создан
# 'r+' - Открыть файл для чтения и записи. Происходит частичная перезапись содержимого файла
# 'x' - Создать новый файл. Если файл есть - будет ошибка
#
# student_file = open('students.txt', 'r')
# Переменная student_file будет ссылаться на файл students.txt, который мы читаем 'r'
#
# sales_file = open('sales.txt', 'w')
# sales_file будет ссылаться на файл sales.txt где мы запишем данные 'w'
#
#
# -----Указание места расположения файла
#
# При чтении и записи файла программа будет думать, что расположение файла должно быть в той же папки, где мы её запускаем
# Если имя файла не содержит путь, то используется относительный , относительно папки, где находится программа
#
# Если требуется открыть файл, расположенный в другом месте, нужно явно указывать путь к нему
#
# test_file = open('C:\\Users\\temp\\test.txt', 'w') Указываем абсолютный путь к файлу
#
# Нужно ставить \\ два слеша, так как нужно экранировать, т.к. слеш в пайтон используется в другом месте
#
# Так же можно использовать префикс r,  который  покажет, что строка сырая(неформатированная)
#
# test_file = open(r'C:\Users\temp\test.txt', 'w')
#
#
# -----Кодировка
# При работе с текстом на русском языке нужно указать кодировку
# Для этого служит параметр encoding
# file = open('info.txt', 'r', encoding='utf-8')
#
# Чтобы получить кодировку открытого файла, используют файловое св-во encoding
#
# print(file.encoding) = utf-8
#
#
# -----Закрытие файлов
# После окончания работы с файлом, его нужно закрыть.
# Для этого используется файловый метод close()
#
# file = open('info.txt', 'r')
#
# тут с ним работем
#
# file.close()
#
# print(file.closed)
#
# Чтобы проверить открыт или закрыт файл используем closed()
#
#
#
# languages.txt
# Python
# Java
# Javascript
# C#
# C
# C++
# PHP
# R
# Objective-C
#
# -----Чтение содержимого файла
# ****************read() читает всё содержимое файлов   R_E_A_D
#
# file = open('lang.txt', 'r', encoding='utf-8')
# content = file.read()
# print(content)
# file.close()
# Считали содержимое файла lang, далее в контент передали её содержимое
# Теперь контент содержит строку, ВКЛЮЧАЯ переносы строк \n
# 'Python\nJava\nJavascript\nC#\nC\nC++\nPHP\nR\nObjective-C'
#
# В read() можно передать число, которое определит сколько символов нужно считать
#
#
# *****************readline() читает одну строку из файла   R_E_A_D_L_I_N_E
# Так же вернет строку, включая \n
#
# file = open('languages.txt', 'r', encoding='utf-8')
#
# language = file.readline()
#
# file.close()
#
# В переменной language будет содержаться строка 'Python\n'
#
# Для удаления символа переноса можно использовать строковый метод
#
# language.rstrip()
#
# Прочитать содержимое всего файла построчно можно через цикл
#
# file = open('languages.txt', 'r', encoding='utf-8')
#
# for i in file:
#     print(i.rstrip())
#
# file.close()
#
#
# **********************readlines() читаем все содержимое файла и возвращает список строк R_E_A_D_L_I_N_E_S
# file = open('languages.txt', 'r', encoding='utf-8')
#
# languages = file.readlines()
#
# file.close()
#
# ['Python\n', 'Java\n', 'Javascript\n', 'C#\n', 'C\n', 'C++\n', 'PHP\n', 'R\n', 'Objective-C']
#
# Чтобы удалить \n можно использовать :
#
# 1) Списочное выражение
#
# languages = [i.rstrip() for i in file.readlines()]
#
# 2)map
#
# languages = list(map(str.strip, file.readlines()))
#
# 3) Анонимные функции
#
# languages = list(map(lambda x: x.strip(), file.readlines()))
#
# Если передать в функцию list() ссылку на файловый объект list(file)
# , получим тот же результат, что при вызове метода file.readlines().
