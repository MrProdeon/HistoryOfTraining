# decimal - десятичное число, для выполнения точных расчетов
#Он представляет собой число с плавающей точкой, как float
#Этот тип создан для операций, чтобы в компьютере они выполнялись как в математике

# Тип данных Decimal – неизменяемый. Операции над ним приводят к созданию новых объектов, при этом старые не меняются.

# Создать Decimal число можно из обычного целого числа (int), из числа с плавающей точкой (float) или из строки (str).


from decimal import *
from stepik_project.password_generator import digits

d1 = Decimal(1)
d2 = Decimal(567)
d3 = Decimal(-93)
d4 = Decimal('12345')
d5 = Decimal('52.198')

print(d1, d2, d3, d4, d5, sep='\n')

# 1
# 567
# -93
# 12345
# 52.198


# При создании float будут проблемы, т.к. будет округление до ближайшего возможного
# А Decimal об этом ничего не знает

from decimal import *

num = Decimal(0.1)

print(num)

# 0.1000000000000000055511151231257827021181583404541015625


# Decimal поддерживает все операции, как и целые числа

from decimal import *

num1 = decimal('5.2')
num2 = Decimal('2.3')

print(num1 + num2)
print(num1 - num2)
print(num1 * num2)
print(num1 / num2)
print(num1 // num2)
print(num1 ** num2)

# 7.5
# 2.9
# 11.96
# 2.260869565217391304347826087
# 2
# 44.34122533787992500412791298


# Так же можно совершать операции Decimal and int

from decimal import *

num = Decimal('5.2')

print(num + 1)
print(num - 10)
print(num * 2)
print(num ** 4)


# Математические функции
# Decimal числа можно передавать как аргументы функциям, ожидающим float.
# # # Они будут преобразованы во float
# # # модуль math, оперирующий float числами, может работать и с Decimal числами.

# Важно понимать, что результатом работы функции модуля math являются float числа, а не Decimal.


# Тип данных Decimal содержит некоторые встроенные математические методы, возвращающие значения Decimal
#
# sqrt()	вычисляет квадратный корень из Decimal числа
# exp() возвращает e**x  для Decimal числа
# ln() вычисляет натуральный логарифм (по основанию e ) Decimal числа
# log10() вычисляет десятичный логарифм (по основанию 10) Decimal числа


# Тип данных Decimal также содержит полезный метод as_tuple() который возвращает кортеж из 3 элементов
#
# sign знак числа (0 полож, 1 отриц)
# digits цифры числа
# exponent кол-во цифр после точки, умноженное на -1

from decimal import *

num1 = Decimal('-1.4568769017')
num2 = Decimal('0.523')

print(num1.as_tuple())
print(num2.as_tuple())

# DecimalTuple(sign=1, digits=(1, 4, 5, 6, 8, 7, 6, 9, 0, 1, 7), exponent=-10)
# DecimalTuple(sign=0, digits=(5, 2, 3), exponent=-3)

# Базовые параметры Decimal можно посмотреть в его контексте, выполнив функцию getcontext()


from decimal import *

print(getcontext())


# Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0,
# flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])

# Точность 28 знаков, округление к ближайшему четному, пределы по экспоненте 999999
# capitals – это про заглавную Е при печати, включенные ловушки – неправильная операция, деление на ноль, переполнение.


# Можно установить свои значения контекста
# Чтобы управлять точность, нужно изменить параметр prec
# Точность втупает в силу только во время арифметичких операций, а не при создании чисел

from decimal import *

getcontext().prec = 3      # устанавливаем точность в 3 знака

num = Decimal('3.1415')

print(num)
print(num * 1)
print(num * 2)
print(num / 2)

# 3.1415
# 3.14
# 6.28
# 1.57



# Округляют числа Decimal с помощью метода quantize()
#
# в качестве первого аргумента принимает объект Decimal, указывающий на формат округления.


from decimal import *

getcontext().prec = 4                    # устанавливаем точность числа

num = Decimal('3.1415926535')

print(num.quantize(Decimal('1.000')))    #  округление до 3 цифр в дробной части
print(num.quantize(Decimal('1.00')))     #  округление до 2 цифр в дробной части
print(num.quantize(Decimal('1.0')))      #  округление до 1 цифр в дробной части


# 3.142
# 3.14
# 3.1

# Можно установить второй параметр стретегии округления



# ROUND_CEILING – округление в направлении бесконечности (Infinity);
# ROUND_FLOOR – округляет в направлении минус бесконечности (- Infinity);
# ROUND_DOWN – округление в направлении нуля;
# ROUND_HALF_EVEN – округление до ближайшего четного числа, число  6.5 не до 7,а до 6
# ROUND_HALF_DOWN – округление до ближайшего нуля;
# ROUND_UP – округление от нуля;
# ROUND_05UP – округление от нуля (если последняя цифра после округления до нуля была бы 0 или 5, в противном случае - к 0)






