# Позиционные аргументы - это те, которые идут по порядке при вызове функции
# def diff(x, y):
#     return x - y
#
#
# res = diff(10, 3)    # используем позиционные аргументы
# print(res)
#
# 10 и 3 идут по порядку, именно по этому порядку они передадутся в х и у
#
#
#
# Именованные аргументы - это когда при вызове функции мы явно указываем какой аргумент
# какой переменной равен
#
# def diff(x, y):
#     return x - y
#
#
# res = diff(x=10, y=3)   # используем именованные аргументы
# print(res)

#
# Можно комбинировать позиционные и именованные аргументы, но сначала должны идти позиционные
# При обратное порядке возникнет ошибка
#
# SyntaxError: positional argument follows keyword argument.
#
#
# Можно задавать параметры по умолчанию в функции
# Это делается не при вызове функции, а в её создании
# Важно то, что параметры по умолчанию обязательно должны идти в последнюю очередь
#
#
# Обычная функция
# def make_circle(x, y, radius, line_width, fill):
#
# Функция с параметрами по умолчанию
# def make_circle(x, y, radius, line_width=1, fill=True):

#Если передать аргумент при вызове функции, который указан по умолчанию, то он заменит тот что по умолчанию!


# Изменяемые типы в качестве значений по умолчанию
#
# Если передавать список в качестве значения, то он будет меняться каждый раз, когда в него что-то добавляется
# И при вызове этой функции в следующий раз, данный список будет иметь уже другой вид
#
# def append(element, seq=[]):
#     seq.append(element)
#     return seq
#
# print(append(10))
# print(append(5))
# print(append(1))
#
# [10]
# [10, 5]
# [10, 5, 1]
#
# Каждый раз в изначально пустой список добавляется элемент и дефолтное значение меняется
# При вызове функции в след раз каждый раз дефолт будет другим
#
# Чтобы проверить дефолт на данный момент, можно воспользоваться .__defaults__
#
# def append(element, seq=[]):
#     seq.append(element)
#     return seq
#
# print('Значение по умолчанию', append.__defaults__)
#
#
# Чтобы этого не возникало, есть общепринятое решение с None
#
# def append(element, seq=None):
#     if seq is None:
#         seq = []
#     seq.append(element)
#     return seq
#
# print(append(10))
# print(append(5))
# print(append(1))
#
# [10]
# [5]
# [1]