# Функция - это такой же объект, как инт, стр, лист и тд
#
#
# print(type(print))
# print(type(sum))
# print(type(abs))
#
# <class 'builtin_function_or_method'>
# <class 'builtin_function_or_method'>
# <class 'builtin_function_or_method'>
#
# Мы не ставим () при передаче аргумента, так как мы не вызываем функцию, а передаем её название
#
#
# Функции так же можно записывать в переменные, передавать в качестве аргумента другим функциям, возвращать функции и тд
#
# def hello():
#     print('Hello')
#
# func = hello()
#
# func()
#
# Переменной func просвоили функцию hello()
#
# Теперь при вызове func() будет выводиться функция hello()
#
#
#
#
# Функции можно передавать в качестве аргумента других функций
#
# Даны 2 функции :
#
# 1) Функция возврата квадрата числа + 1
# def square_add_one(x):
#     return x * x + 1
#
# 2) функция возврата куба числа + квадрата числа
#
# def cube_add_square(x):
#     return x ** 3 + x ** 2
#
# Так же дана вот такая функция :
# def plot(f, a, b):
#     pass
#
# В неё мы можем передать наши две предыдущие функции
#
# plot(square_add_one, 1, 10)
#
# plot(cube_add_square, -10, 10)
#
#
#
#
# Встроенные функции, принимающие функции в качестве аргументов
#
# Встроенные функции min, max, sorted могут принимать в качестве второго аргумента key
# Это функция, которая определит условия сравнения элементов
# значение key должно быть функцией, принимающей один аргумент и возвращающей на его основе ключ для сравнения.
#
# Дан список чисел
# numbers = [10, -7, 8, -100, -50, 32, 87, 117, -210]
# print(max(numbers, key=abs))
# Таким образом будет сравнение именно модулей числа (abs)
# print(min(numbers, key=abs))
#
#
#
# Делаем две функции
# Первая вернет второй элемент
# def compare_by_second(point):
#     return point[1]
#
# Вторая вернет сумму первого и второго элемента
# def compare_by_sum(point):
#     return point[0] + point[1]
#
#
# points = [(1, -1), (2, 3), (-10, 15), (10, 9), (7, 18), (1, 5), (2, -4)]
#
# print(sorted(points, key=compare_by_second))   # сортируем по второму значению кортежа
# print(sorted(points, key=compare_by_sum))      # сортируем по сумме кортежа
#
#
# Функции в качестве возвращаемых значений других функций
#
# Функции можно записывать в других функциях и возвращать там значение
# Таким образом при вызове основной функции, она вернет так же результат функции внутри неё
#
# Пример
#
# def generator():
#     def hello():
#         print('hello')
#     return hello()
#
# func1 = generator()
# func1()
#
# В функции generator функция хелло вернула хелло, поэтому при вызове генератора мы получаем принт хелло
#
#





