#метод items() – возвращает словарные пары ключ: значение, как соответствующие им кортежи
#метод keys() – возвращает список ключей словаря;
#метод values() – возвращает список значений словаря.

# Для изменения значения оператором = пишем название словаря и ключ
info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher'}
info['name'] = 'Timur'

#Для добавления нового элемента присваиваем новому ключу новое значение
info['email'] = 'timyr-guev@yandex.ru'

# Метод get()
# Принимает в качестве аргумента значение, если его нет в словаре, то выдаст None
# Либо может выдать второй аргумент, который мы пропишем

numbers = [9, 8, 32, 1, 10, 1, 10, 23, 1, 4, 10, 4, 2, 2, 2, 2, 1, 10, 1, 2, 2, 32, 23, 23]

result = {}
for num in numbers:
    result[num] = result.get(num, 0) + 1

#В словаре если этого числа ещё нет, то мы записываем это число с ключом 1
# И так де тот метод сразу выводим значение


# Метод update()
# Объединяет ключи и значения словарей.
# Если ключи совпадают, то сохраняется значение словаря, который указан в качестве аргумента

info1 = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}

info2 = {'age': 30,
        'city': 'New York',
        'email': 'bob@web.com'}

info1.update(info2)

print(info1)

# Выведет словарь, в котором если все ключи и значения, но возраст 30

# операторы | и |= так же объединяют словари





# Метод setdefault(key, default)
# Принимает 2 аргумента key and default
# Получает значение словаря по заданному ключу
# Если заданного ключа нет, то добавляет второй аргумент в словарь
# Если второй элемент не задан, добавит None

#Если по этому ключу уже имеется значение, то ничего не изменит

info = {'name': 'Bob',
        'age': 25}

name1 = info.setdefault('name')
name2 = info.setdefault('name', 'Max')

# Всё останется так же сверху

info = {'name': 'Bob',
        'age': 25}

job = info.setdefault('job', 'Dev')
print(info)
print(job)

# Вставить в словарь инфо ключ job и значение Dev



# Удаление элементов из словаря

# Оператор del удаляет элементы словаря по ключу

info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher',
        'email': 'timyr-guev@yandex.ru'}

del info['email']    # удаляем элемент имеющий ключ email
del info['job']      # удаляем элемент имеющий ключ job


#Если удаляемого ключа в словаре нет, возникнет ошибка KeyError.


# Метод pop()
# Удаляет элемент по ключу из словаря, при этом возвращая значение этого ключа

info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher',
        'email': 'timyr-guev@yandex.ru'}

email = info.pop('email')          # удаляем элемент по ключу email, возвращая его значение
job = info.pop('job')              # удаляем элемент по ключу job, возвращая его значение
#  если удаляемого ключа в словаре нет, возникнет ошибка KeyError
# Чтобы ошибки не было, можно передать второй аргумент
surname = info.pop('surname', None)
# Если такого ключа нет, то в surname будем хранить None



# Метод popitem()
# Удаляет последний добавленный элемент и вернет удаляемый элемент в виде кортежа (ключ : значение)

info = {'name': 'Bob',
     'age': 25,
     'job': 'Dev'}

info['surname'] = 'Sinclar'

item = info.popitem()

print(item)
print(info)

# В айтем вернет всё как и было
# В инфо вернет кортеж surname : Sinclar

#В версиях Python ниже 3.6 метод popitem() удалял случайный элемент.




# Метод clear()

# Удаляет все элементы из словаря



# Метод copy()
# Создает копию словаря
info = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}

info_copy = info.copy()

print(info_copy)
# Вернет такой же словарь

Создает поверхностную копию словаря
Если в этой копии что-то изменить, то изменение не коснется основного словаря
Если присвоить значение начального словаря другой переменной, а далее его изменить, то в начальном словаре это тоже изменится
